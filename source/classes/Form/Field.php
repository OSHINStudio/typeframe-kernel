<?php
class Form_Field {
	protected $label;
	protected $value;
	private $_input;
	protected $form;
	protected $error;
	/**
	 * Validate the field.  This function calls the process() function
	 * to perform validation and/or sanitization.
	 * @param string $value The value to be validated
	 * @param string $label A user-friendly name for the field
	 * @param array $form An associative array of all values in the current form.
	 * Useful for validation that depends on the values of other fields.
	 */
	final public function validate($value, $label, $form = array()) {
		$this->_input = $value;
		$this->value = $value;
		$this->label = $label;
		$this->form = $form;
		$this->error = null;
		$this->process();
		if ($this->error) {
			$this->value = null;
			return false;
		}
		return true;
	}
	final public function data() {
		return array(
			'label' => $this->label,
			'error' => $this->error
		);
	}
	/**
	 * Get the error message generated by the last validation, if any.
	 * @return string|null The error message or NULL if there was not an error.
	 */
	final public function error() {
		return $this->error;
	}
	/**
	 * Get the original value that was received for validation.
	 */
	final public function input() {
		return $this->_input;
	}
	/**
	 * Get the value of the input after it was sanitized by the process() function.
	 * @return scalar The sanitized value.
	 */
	final public function sanitized() {
		return $this->value;
	}
	/**
	 * Reset any error and value generated by the last validation.
	 */
	final public function reset() {
		$this->_input = null;
		$this->error = null;
		$this->value = null;
		$this->label = null;
		$this->form = null;
	}
	/**
	 * Check if a value is valid and/or perform sanitization.
	 * The value is in $this->value.
	 * To report an error, set its message in $this->error.
	 * To sanitize the value, modify $this->value.
	 * @return void
	 */
	protected function process() {
		return;
	}
}
