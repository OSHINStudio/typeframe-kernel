<?php
class Form_Handler {
	private $_errors = array();
	private $_fields = array();
	private $_input = array();
	public function __construct() {
	
	}
	/**
	 * Add a field to the form handler
	 * @param string $name The field name, e.g., as it would appear in an input element's name attribute
	 * @param bool $required If true (default), this field is required for the submission to be valid
	 * @param string $label A user-friendly label for the field (defaults to $name if not specified)
	 * @param Form_Field $field An optional FieldHandler object that performs advanced validation.
	 * @param string $default A default value for the field
	 */
	public function addField($name, $required = true, $label = '', Form_Field $field = null, $default = null) {
		$this->_fields[$name] = array('name' => $name, 'required' => $required, 'field' => $field, 'label' => ($label ? $label : $name), 'default' => $default);
	}
	/**
	 * Determine if the input received is valid.
	 * @param assoc $input Associative array of values (or the POST values if available)
	 * @return bool
	 */
	public function validate($input = null) {
		$this->reset();
		// If $input is null, assume we're validating a POST
		if (is_null($input)) {
			if (!isset($_POST)) {
				// No input to validate
				return null;
			}
			$input = $_POST;
		}
		$this->_input = $input;
		if (count($this->_fields) == 0) {
			// No fields to validate
			return null;
		}
		$this->_errors = array();
		foreach ($this->_fields as $k => $fld) {
			if (!isset($this->_input[$k]) && !is_null($fld['default'])) {
				$this->_input[$k] = $fld['default'];
			} else {
				$currentError = false;
				$result = $this->_validateText($fld, (!empty($input[$fld['name']]) ? $input[$fld['name']] : ''));
				if($result !== true) {
					$this->_errors[] = $result;
					$currentError = true;
				}
				if (!$currentError) {
					if (!is_null($fld['field'])) {
						$result = $this->_validateFieldHandler($fld['name'], $fld['field'], $fld['label']);
					}
				}
			}
		}
		return (count($this->_errors) == 0);
	}
	// Do the validation necessary for validation of file uploads.
	private function _validateFile($field){
		// Not required?  Alright then!  Proceed!
		if(!$field['required']) return true;

		$k = $field['name'];
		// Just check if the file was uploaded this time, or if it's present in the post data.

		if(isset($_POST[$k]) && $_POST[$k]){
			// The file was already uploaded.
			return true;
		}
		elseif(isset($_FILES[$k])){
			$err = $errmsg = '';
			switch($_FILES[$k]['error']){
				case UPLOAD_ERR_OK:
					// w00t!
					return true;
					break;
				case UPLOAD_ERR_NO_FILE:
					$err = 'Required';
					$errmsg = ucfirst($field['label']) . ' is required.';
					break;
				default:
					$err = 'Error';
					$errmsg = 'There was an error while uploading ' . $field['label'] . '.  Please try again or contact the system administrator.';
					break;
			}

			return array(
				'field' => $k,
				'label' => $field['label'],
				'error' => $err,
				'message' => $errmsg
			);

		}
		else{
			return array(
				'field' => $k,
				'label' => $field['label'],
				'error' => 'Required',
				'message' => ucfirst($field['label']) . ' is required.'
			);
		}
	}
	// Do the validation logic necessary for text fields.
	private function _validateText($field, $value){
		$k = $field['name'];
		if ( (empty($value)) && ($field['required']) ) {
			return array(
				'field' => $k,
				'label' => $field['label'],
				'error' => 'Required',
				'message' => ucfirst($field['label']) . ' is required.'
			);
		}
		return true;
	}
	private function _validateFieldHandler($name, Form_Field $handler, $label) {
		if (is_array($name)) {
			$val = array();
			foreach ($name as $n) {
				$val[] = (isset($this->_input[$n]) ? $this->_input[$n] : '');
			}
		} else {
			$val = (isset($this->_input[$name]) ? $this->_input[$name] : '');
		}
		$handler->validate($val, $label, $this->_input);
		if ($handler->error()) {
			$this->_errors[] = array (
				'field' => $name,
				'label' => $label,
				'error' => 'Invalid',
				'message' => $handler->error()
			);
			return false;
		} else {
			if (is_array($name)) {
				$i = 0;
				$sanitized = $handler->sanitized();
				foreach ($name as $n) {
					$this->_input[$n] = $sanitized[$i];
					$i++;
				}
			} else {
				$this->_input[$name] = $handler->sanitized();
			}
			return true;
		}
	}
	/**
	 * Clear the last validation's input and error data.
	 */
	public function reset() {
		$this->_errors = array();
		$this->_input = array();
	}
	/**
	 * The input used for the last validation.
	 * @return array An associative array of input.
	 */
	public function input() {
		return $this->_input;
	}
	/**
	 * The errors generated by the last validation.
	 * @return array An array containing associative arrays of error data (field, label, error, and message).
	 */
	public function errors() {
		return $this->_errors;
	}
	public function fields() {
		return $this->_fields;
	}
}
